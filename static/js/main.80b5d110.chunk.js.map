{"version":3,"sources":["Components/Text/index.js","Components/Text/Text.jsx","Components/Button/index.js","Components/Button/Button.jsx","Components/ClickableText/index.js","Components/ClickableText/ClickableText.jsx","Pages/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["Text","props","className","children","Button","onClick","ClickableText","href","link","Home","useState","choice","setChoice","key","avgTypingDelay","p","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.80b5d110.chunk.js","sourcesContent":["import Text from './Text';\r\n\r\nexport default Text;","import React from \"react\";\r\nimport \"./Text.css\"\r\n\r\n\r\nconst Text = (props) => {\r\n    return (\r\n            <p className=\"text\">{props.children}</p>    \r\n    )\r\n}\r\n\r\nexport default Text;","import Button from \"./Button\";\r\n\r\nexport default Button;","import React from 'react';\r\nimport \"./Button.css\";\r\n\r\nconst Button = (props) => {\r\n    return(\r\n        <button className=\"btn\" onClick={props.onClick}>{props.children}</button>\r\n    )\r\n}\r\n\r\nexport default Button;","import ClickableText from './ClickableText';\r\n\r\nexport default ClickableText;","import React from 'react';\r\nimport './ClickableText.css';\r\n\r\nconst ClickableText = (props) => {\r\n    return (\r\n        <a className=\"link\" href={props.link}>{props.children}</a>\r\n    )\r\n}\r\n\r\nexport default ClickableText;\r\n","import React, { useState } from 'react';\r\nimport Text from '../Components/Text';\r\nimport Button from '../Components/Button';\r\nimport ClickableText from '../Components/ClickableText';\r\n\r\nimport './Home.css'\r\nimport Typist from 'react-typist';\r\n\r\nfunction Home() {\r\n    // Constant for the choices made by user\r\n    const MAIN = \"main\";\r\n    const PROJECT = \"project\";\r\n    const EXPERIENCE = \"experience\";\r\n    const MAIN2 = \"main2\";\r\n    const ABOUT = \"about\";\r\n    const CONTACT = \"contact\";\r\n\r\n    const [choice, setChoice] = useState(MAIN);\r\n\r\n    if (choice === MAIN) {\r\n        return (\r\n            <div className=\"parent-container\">\r\n                <Typist key={1} avgTypingDelay={40}>\r\n                    <div className=\"paragraph\">\r\n\r\n                        <Text>Hi,</Text>\r\n                        <Text>Welcome to my online portofolio, in this section you can choose what do you want to know about me.</Text>\r\n                        <Text>You can choose it with the button below, have fun exploring about me :)</Text>\r\n                    </div>\r\n                    <div className=\"choice\">\r\n                        <Button onClick={() => setChoice(ABOUT)} >About Me</Button>\r\n                        <Button onClick={() => setChoice(PROJECT)} >My Projects</Button>\r\n                        <Button onClick={() => setChoice(EXPERIENCE)} >My Experience</Button>\r\n                        <Button onClick={() => setChoice(CONTACT)} >My Contact</Button>\r\n                    </div>\r\n                </Typist>\r\n            </div>\r\n        )\r\n    }\r\n    else if (choice === PROJECT) {\r\n        return (\r\n            <div className=\"parent-container\">\r\n                <Typist key={2} avgTypingDelay={40}>\r\n                    <div className=\"paragraph\">\r\n                        <Text>Here are my projects:</Text>\r\n                        <ClickableText link=\"http://mahimahi.herokuapp.com/main/\">MAHIMAHI - Food Recommender</ClickableText>\r\n                        <Text>A Web based food recommender system using user based collaborative filtering. The project's target audience are the students of University of Indonesia that majoring in Computer Science.</Text>\r\n                        <br />\r\n                        <ClickableText link=\"https://chillnema.net\">Chillnema - Streaming Website</ClickableText>\r\n                        <Text>A proof-of-concept on-demand streaming website. Built with Golang as its backend and ReactJS as its frontend. User can watch videos that is stored on S3, while admin can add film using an API.</Text>\r\n                        <br />\r\n                        <ClickableText link=\"https://ezza-ardiala.itch.io/castle-panic\">Castle Panic - Simple 2D Platformer</ClickableText>\r\n                        <Text>A simple platforming game made using Godot Engine. Player must control the creature so he can escape the castle using keyboard and mouse.</Text>\r\n                        <br />\r\n                        <Text>Is there anything else that you wanna know?</Text>\r\n                    </div>\r\n                    <div className=\"choice\">\r\n                        <Button onClick={() => setChoice(ABOUT)} >About Me</Button>\r\n                        <Button onClick={() => setChoice(EXPERIENCE)} >My Experience</Button>\r\n                        <Button onClick={() => setChoice(CONTACT)} >My Contact</Button>\r\n                        <Button onClick={() => setChoice(MAIN2)} >That's All</Button>\r\n                    </div>\r\n                </Typist>\r\n            </div>\r\n\r\n        )\r\n    }\r\n    else if (choice === EXPERIENCE) {\r\n        return (\r\n            <div className=\"parent-container\">\r\n                <Typist key={3} avgTypingDelay={40}>\r\n                    <div className=\"paragraph\">\r\n                        <Text>Here are my experiences :</Text>\r\n                        <Text>PT. GO Online Destination - Finance Intern</Text>\r\n                        <Text>Responsible for processing highly sensitive business data and analyzing on Excel. Learned to be thorough when analyzing the data and learned to communicate to other team member and superior officers.</Text>\r\n                        <br />\r\n                        <Text>PT. Tokopedia - Test Engineer Intern</Text>\r\n                        <Text>Tasked with creating a dashboard  that unified all of Tokopedia's data that  is stored and displayed on other dashboard that they used (eg. Datadog, Fabric, Prometheus)</Text>\r\n                        <br />\r\n                        <Text>Is there anything else that you wanna know</Text>\r\n                    </div>\r\n                    <div className=\"choice\">\r\n                        <Button onClick={() => setChoice(ABOUT)} >About Me</Button>\r\n                        <Button onClick={() => setChoice(PROJECT)} >My Project</Button>\r\n                        <Button onClick={() => setChoice(CONTACT)} >My Contact</Button>\r\n                        <Button onClick={() => setChoice(MAIN2)} >That's All</Button>\r\n                    </div>\r\n                </Typist>\r\n            </div>\r\n        )\r\n    }\r\n    else if (choice === MAIN2) {\r\n        return (\r\n            <div className=\"parent-container\">\r\n                <Typist key={6} avgTypingDelay={40}>\r\n                    <div className=\"paragraph\">\r\n                        <Text>Thank you for visiting my site</Text>\r\n                        <br/>\r\n                        <Text>If you still need more info, you can download the PDF version <span><ClickableText link=\"https://drive.google.com/file/d/1_818LLwLRBzFIoSyXmAT89HPrPnlmrzR/view?usp=sharing\">here</ClickableText></span></Text>\r\n                        <br/>\r\n                        <Text>And if you like the site, you can also fork it <span><ClickableText link=\"https://github.com/MieGorenk/portofolio\">here</ClickableText></span></Text>\r\n                    </div>\r\n                    <div className=\"choice\">\r\n                        <Button onClick={() => setChoice(PROJECT)} p=\"My Projects\" />\r\n                    </div>\r\n                </Typist>\r\n            </div>\r\n        )\r\n    }\r\n    else if (choice === ABOUT) {\r\n        return (\r\n            <div className=\"parent-container\">\r\n                <Typist key={4} avgTypingDelay={40}>\r\n                    <div className=\"paragraph\">\r\n                        <Text>A student that is eager to learn many things to have a successful career becoming a developer. Have a good understanding on the foundation of computer science. Seeking work in a team environment to minimize my introverted habit.</Text>\r\n                        <br />\r\n                        <Text>Is there anything else you wanna know?</Text>\r\n                    </div>\r\n                    <div className=\"choice\">\r\n                        <Button onClick={() => setChoice(PROJECT)} >My Project</Button>\r\n                        <Button onClick={() => setChoice(EXPERIENCE)} >My Experience</Button>\r\n                        <Button onClick={() => setChoice(CONTACT)} >My Contact</Button>\r\n                        <Button onClick={() => setChoice(MAIN2)} >That's All</Button>\r\n                    </div>\r\n                </Typist>\r\n            </div>\r\n        )\r\n    }\r\n    else if (choice === CONTACT) {\r\n        return (\r\n            <div className=\"parent-container\">\r\n                <Typist key={5} avgTypingDelay={40}>\r\n                    <div className=\"paragraph\">\r\n                        <Text>You can find or contact me using the information below:</Text>\r\n                        <br />\r\n                        <Text>+62 857 1818 7896</Text>\r\n                        <Text>ezzaardiala@gmail.com</Text>\r\n                        <ClickableText link=\"https://github.com/MieGorenk\">Github</ClickableText>\r\n                        <br/>\r\n                        <ClickableText link=\"https://gitlab.com/ezza11\">Gitlab</ClickableText>\r\n                        <br/>\r\n                        <ClickableText link=\"https://www.linkedin.com/in/ezza-ardiala-0b8004155/\">LinkedIn</ClickableText>\r\n                        <br />\r\n                        <Text>Is there anything else you wanna know?</Text>\r\n                    </div>\r\n                    <div className=\"choice\">\r\n                        <Button onClick={() => setChoice(ABOUT)} >About Me</Button>\r\n                        <Button onClick={() => setChoice(EXPERIENCE)} >My Experience</Button>\r\n                        <Button onClick={() => setChoice(PROJECT)} >My Project</Button>\r\n                        <Button onClick={() => setChoice(MAIN2)} >That's All</Button>\r\n                    </div>\r\n                </Typist>\r\n            </div>\r\n        )\r\n    }\r\n    // Error\r\n    else {\r\n        return (\r\n            <div className=\"parent-container\">\r\n                <div className=\"paragraph\">\r\n                    <Text>Whoops, it seems we encountered an error</Text>\r\n                </div>\r\n                <div className=\"choice\">\r\n                    <Button onClick={() => setChoice(MAIN)} p=\"RESTART\" />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home","import React from 'react';\nimport Home from \"./Pages/Home\"\n\nfunction App() {\n  return (\n    <Home/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}